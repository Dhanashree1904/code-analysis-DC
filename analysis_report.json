[
  {
    "file": "source_codes\\demo1.py",
    "hash": "de3c00b20c907de986d38b59c63e2c25b840a1bfbdf4bb84781f86fc367150e6",
    "analysis": "**1. Purpose**  \nThis code is a non-malicious demonstration simulating common malware behaviors for static analysis testing. It includes patterns like string obfuscation, anti-VM checks, persistence setup simulation, C2 communication preparation, and data collection—all inert and non-destructive.\n\n---\n\n**2. Suspicious/Malicious Lines**  \n- **Lines 13–14**: Base64-encoded strings (`ENCODED_C2`, `ENCODED_CMD`) suggest attempts to hide C2 URLs or commands (common in malware).  \n- **Lines 19–27**: `anti_vm_check` scans system info for VM indicators (evasion technique).  \n- **Line 32**: `setup_persistence_demo` writes to a file mimicking persistence mechanisms (e.g., real malware uses registry keys).  \n- **Lines 50–52**: `connect_c2_demo` parses C2 host/port (socket setup code is commented but still indicative of malicious intent).\n\n---\n\n**3. Malware Coding Patterns**  \n- **Obfuscation**: Base64 decoding of strings.  \n- **Anti-Analysis**: Checks for virtualized environments.  \n- **Persistence**: Simulates writing to a file (replaces real persistence techniques like registry modification).  \n- **C2 Communication**: Prepares socket connections to a hardcoded endpoint.\n\n---\n\n**4. Suspicious Libraries/APIs**  \n- `base64`: Decodes hidden strings.  \n- `socket`: Prepares for network communication.  \n- `platform`: Collects system info (reconnaissance).  \n- `os`: Accesses process and file system data.  \n\n---\n\n**5. File System Operations**  \nWrites to `./.persistence_demo.txt` (**Line 32**) as a harmless persistence placeholder. No destructive file operations.\n\n---\n\n**6. Network Activity**  \n- **Line 13**: Hardcoded C2 URL (`http://example.com:8080/api`—benign here).  \n- **Lines 50–52**: Parses host/port for C2 (socket logic is commented out).  \n\n---\n\n**7. Process/Service Manipulation**  \nNone. The code collects the process ID (`os.getpid()`) but does not manipulate processes or services.\n\n---\n\n**8. System Resource Interaction**  \nCommented-out code (**Lines 35–36**) demonstrates Windows registry modification for persistence (not executed).\n\n---\n\n**9. Obfuscation/Evasion**  \n- Base64-encoded C2 URL and commands.  \n- Anti-VM checks (**Lines 19–27**).  \n\n---\n\n**10. Data Collection/Exfiltration**  \n`collect_data_demo` harvests system info (working directory, PID, OS platform) but does not exfiltrate it.\n\n---\n\n**11. Incomplete/Misleading Code**  \n- Network connection code is commented out (**Lines 53–56**).  \n- Persistence logic writes to a temporary file instead of modifying the registry.  \n\n---\n\n**12. MITRE ATT&CK Techniques**  \n- **T1497** (Virtualization/Sandbox Evasion): Anti-VM checks.  \n- **T1547.001** (Registry Run Keys): Simulated persistence.  \n- **T1071.001** (Web Protocols): HTTP-based C2 simulation.  \n- **T1059** (Command Execution): Decoded `ping` command (not executed).  \n\n---\n\n**13. Risk Rating**  \n**Low** (code is inert). However, the patterns match malicious intent, warranting caution in real-world scenarios.\n\n---\n\n**14. Recommendations**  \n- Dynamic analysis in a sandbox to observe behavior.  \n- YARA rules targeting base64 usage and anti-VM strings.  \n- Monitor for decoded C2 URLs (`example.com:8080` in this case).  \n\n---\n\n**15. Unclear Code**  \nNone. The code is intentionally transparent for demo purposes.\n\n---\n\n**16. Summary**  \n- Non-malicious script illustrating malware techniques.  \n- Features: Obfuscated strings, anti-VM checks, simulated persistence/C2.  \n- Safe for analysis but serves as a template for malicious logic.  \n- No destructive actions—educational use only."
  },
  {
    "file": "source_codes\\demo2.ps1",
    "hash": "8538cc55a45a97ccc727bc296417602733cf1767efe934170f4bf7fc646348c3",
    "analysis": "**1. Purpose**  \nThis is a **demo PowerShell script** simulating common malware behaviors for static analysis testing. It demonstrates techniques like VM detection, persistence setup (non-functional), network target parsing, and obfuscation but does **NOT** execute malicious actions (e.g., network I/O, actual persistence).\n\n---\n\n**2. Suspicious Lines**  \n- **Lines 4-5**: Base64-encoded URL (`$encUrl` ➔ decodes to `http://example.com:8080/heartbeat`). Often used to hide malicious endpoints.  \n- **Lines 9-14**: `Get-AntiVM` scans for VM-related processes (`vboxservice`, `vmtoolsd`), a hallmark of anti-analysis checks.  \n- **Line 21**: Simulated persistence file write (`.persistence_demo.txt`). Real malware would use registry/startup paths instead.  \n\n---\n\n**3. Malware Coding Patterns**  \n- **Anti-VM checks**: Scans for virtualization/sandbox processes (T1497).  \n- **Persistence simulation**: Demos registry Run key persistence logic (commented-out `reg add`, replaced with inert file write).  \n- **Obfuscation**: Base64 encoding of network URLs (T1027).  \n\n---\n\n**4. Suspicious APIs/System Calls**  \n- **`Get-Process`**: Used to detect VM/sandbox processes.  \n- **Registry manipulation code** (line 19, commented out): Shows intent for persistence (T1547).  \n\n---\n\n**5. File System Operations**  \n- Creates `.persistence_demo.txt` in the script directory (line 21) – harmless in this case but mimics file-based persistence.  \n\n---\n\n**6. Network Code**  \n- Parses a decoded URL (`example.com:8080/heartbeat`) but **no actual network activity**. Prepares for potential C2 communication (T1071).  \n\n---\n\n**7. Process/Service Manipulation**  \n- Only checks for processes (non-destructive).  \n\n---\n\n**8. System Resource Interaction**  \n- Simulated registry persistence (non-functional).  \n\n---\n\n**9. Obfuscation/Evasion**  \n- Base64-encoded URL (line 4).  \n- Functions named to mimic benign actions (e.g., `Get-AntiVM`).  \n\n---\n\n**10. Data Collection/Exfiltration**  \n- None in this demo, but structured to log VM detection results.  \n\n---\n\n**11. Obfuscated/Incomplete Code**  \n- Commented-out `reg add` command (line 19) – inactive but shows malicious intent.  \n- Network logic lacks execution code (no `Invoke-WebRequest` or similar).  \n\n---\n\n**12. MITRE ATT&CK Techniques**  \n- **T1497** (Virtualization/Sandbox Evasion): VM process detection.  \n- **T1053** (Scheduled Task/Registry Run Keys): Persistence demo.  \n- **T1027** (Obfuscated Files/Information): Base64-encoded URL.  \n\n---\n\n**13. Risk Rating**  \n**Low** (This script is inert and safe, but the patterns it simulates would be **High** risk in real malware).  \n\n---\n\n**14. Recommendations**  \n- **Dynamic Analysis**: Test in a sandbox to confirm no network traffic.  \n- **YARA Rules**: Detect Base64 encoding, VM checks, and persistence keywords.  \n- **Monitor Registry**: Watch for Run key modifications if script is modified.  \n\n---\n\n**15. Unclear Code**  \nNone – the code is intentionally transparent for demo purposes.  \n\n---\n\n**16. Summary**  \n- Safe demo script for malware analysis training.  \n- Simulates VM checks, persistence, and network prep with no active harm.  \n- Demonstrates obfuscation and anti-analysis techniques.  \n- Use to practice identifying common malware patterns in static analysis."
  }
]